---

# a password is randomly generated using some parameters (number of bytes and the salt)
- name: generate random password
  shell: openssl rand -base64 {{ bytes }} | openssl passwd -stdin -salt {{ salt }}
  register: password
  changed_when: false
  delegate_to: localhost

# the password is then hashed for future use as the user module does not accept the plain text password
- name: generate crypt for the password
  command:  python -c 'import crypt; print crypt.crypt("{{password.stdout}}")'
  register: encrypted_password
  changed_when: false
  delegate_to: localhost

#- name: get old password
#  shell: grep root /etc/shadow | cut -d ':' -f2
#  register: old_encrypted_password

# ansible vault does not accept stdin, so we have the put the vault password in a temporary file
# the handler makes sure the file will be deleted.
# /!\ make sure the 'force_handlers' is set to true either in the play or in your ansible.cfg
- name: create temporary vault password file
  copy:
    dest: "{{ vault_password_file }}"
    content: "{{ master_pw }}"
    mode: 0600
  become: false
  delegate_to: localhost
  notify: delete temporary vault file

- name: create vault file for the server
  template:
    src: ./templates/server.yml.j2
    dest: "{{ vault_directory }}/{{ inventory_hostname }}.yml"
    backup: yes
  delegate_to: localhost
  become: false
  register: backup

- name: encrypt vault file for the server
  command: ansible-vault encrypt {{ vault_directory }}/{{inventory_hostname}}.yml --vault-password-file={{ vault_password_file }}
  delegate_to: localhost
  become: false

- block:
  - name: set password
    user:
      name: root
      password: "{{ encrypted_password.stdout }}"
      update_password: always
    register: ssh
  rescue:
    # an error occured during password change on the server, roll back the appropriate vault file in the local vault_directory
    # Ansible try to decrypt the file backed-up with vault password used to encrypt the variable file which is not necessary the same as the one used to encrypt remote root password locally. This is why the module 'command' is used instead of 'copy'
    - name: copy the old vault file for the server
      command: cp {{ backup.backup_file }} {{ vault_directory }}/{{ inventory_hostname }}.yml
      delegate_to: localhost
      become: false
    # handler seems no to run despite the 'force_handler' if we end up in the rescue, so the handler is duplicated...
    - name: delete temporary vault file
      file:
        path: "{{ vault_password_file }}"
        state: absent
      delegate_to: localhost
      become: false


